{"ast":null,"code":"// store.ts\nimport { createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { reducer, initialState } from \"./states/announcement/reducer\";\n\n// export const initialRootState = {tick:\"ghgh\"};\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n// create a makeStore function\nconst makeStore = context => createStore(reducer, initialState); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","createWrapper","reducer","initialState","makeStore","context","wrapper","debug"],"mappings":"AAAA;AAEA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAmBC,aAAnB,QAAgD,oBAAhD;AACA,SAAQC,OAAR,EAAgBC,YAAhB,QAAmC,+BAAnC;;AAMA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAMC,SAA2B,GAAIC,OAAD,IAAsBL,WAAW,CAACE,OAAD,EAASC,YAAT,CAArE,C,CAEA;;;AACA,OAAO,MAAMG,OAAO,GAAGL,aAAa,CAAQG,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["// store.ts\n\nimport {createStore} from 'redux';\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\nimport {reducer,initialState} from \"./states/announcement/reducer\";\n \nexport interface State {\n  message: 'No announcement...'\n}\n\n// export const initialRootState = {tick:\"ghgh\"};\n\n\n\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\n// create a makeStore function\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer,initialState);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}