{"ast":null,"code":"// store.ts\nimport { createStore, applyMiddleware } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { reducer, initialState } from \"./states/announcement/reducer\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\n// export const initialRootState = {tick:\"ghgh\"};\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n// create a makeStore function\nvar makeStore = function makeStore(context) {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}; //  createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n// let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));  \n// export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","applyMiddleware","createWrapper","reducer","initialState","composeWithDevTools","thunkMiddleware","makeStore","context","wrapper","debug"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAAmBC,aAAnB,QAAgD,oBAAhD;AACA,SAAQC,OAAR,EAAgBC,YAAhB,QAAmC,+BAAnC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,eAAP,MAA4B,aAA5B;;AAMA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,IAAMC,SAAc,GAAG,SAAjBA,SAAiB,CAACC,OAAD;AAAA,SACvBR,WAAW,CAACG,OAAD,EAAUC,YAAV,EAAwBC,mBAAmB,CAACJ,eAAe,CAACK,eAAD,CAAhB,CAA3C,CADY;AAAA,CAAvB,C,CAGA;AACA;AAGA;;;AACA,OAAO,IAAMG,OAAO,GAAGP,aAAa,CAAQK,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["// store.ts\nimport { createStore, applyMiddleware } from 'redux'\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\nimport {reducer,initialState} from \"./states/announcement/reducer\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport thunkMiddleware from 'redux-thunk'\n \nexport interface State {\n  message: 'No announcement...'\n}\n\n// export const initialRootState = {tick:\"ghgh\"};\n\n\n\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\n// create a makeStore function\nconst makeStore: any = (context: Context) => \ncreateStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n\n//  createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n// let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));  \n\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}