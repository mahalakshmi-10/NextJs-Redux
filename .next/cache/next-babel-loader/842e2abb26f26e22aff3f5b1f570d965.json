{"ast":null,"code":"// store.ts\nimport { createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { reducer } from \"./states/announcement/reducer\";\n\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n// create a makeStore function\nvar makeStore = function makeStore(context) {\n  return createStore(reducer);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","createWrapper","reducer","makeStore","context","wrapper","debug"],"mappings":"AAAA;AAEA,SAAQA,WAAR,QAAqC,OAArC;AACA,SAAmBC,aAAnB,QAAyD,oBAAzD;AACA,SAAQC,OAAR,QAAsB,+BAAtB;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,IAAMC,SAA2B,GAAG,SAA9BA,SAA8B,CAACC,OAAD;AAAA,SAAsBJ,WAAW,CAACE,OAAD,CAAjC;AAAA,CAApC,C,CAEA;;;AACA,OAAO,IAAMG,OAAO,GAAGJ,aAAa,CAAQE,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["// store.ts\n\nimport {createStore, AnyAction} from 'redux';\nimport {MakeStore, createWrapper, Context, HYDRATE} from 'next-redux-wrapper';\nimport {reducer} from \"./states/announcement/reducer\"\n \nexport interface State {\n    tick: string;\n}\n\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\n// create a makeStore function\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}