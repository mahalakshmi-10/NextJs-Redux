{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer, initialState } from './states/announcement/reducer';\nimport { createWrapper } from 'next-redux-wrapper';\n\n// export const initalStore = (initialState) => {\n//   return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n// }\n// create a makeStore function\nconst makeStore = context => createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware))); // let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));\n// export an assembled wrapper    \n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","reducer","initialState","createWrapper","makeStore","context","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,OAAT,EAAiBC,YAAjB,QAAqC,+BAArC;AAEA,SAAmBC,aAAnB,QAAgD,oBAAhD;;AAQA;AACA;AACA;AAMA;AACA,MAAMC,SAA2B,GAAIC,OAAD,IAAsBR,WAAW,CAACI,OAAD,EAAUC,YAAV,EAClEH,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAD+C,CAArE,C,CAIA;AAGA;;;AACA,OAAO,MAAMM,OAAO,GAAGH,aAAa,CAAQC,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\nimport { reducer,initialState } from './states/announcement/reducer';\n\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\n\nexport interface State {\n  message: 'No announcement...'\n}\n\n\n\n// export const initalStore = (initialState) => {\n//   return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n// }\n\n\n\n\n  \n// create a makeStore function\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer, initialState,\n   composeWithDevTools(applyMiddleware(thunkMiddleware))); \n\n\n// let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));\n\n\n// export an assembled wrapper    \nexport const wrapper = createWrapper<State>(makeStore, {debug: true});     "]},"metadata":{},"sourceType":"module"}