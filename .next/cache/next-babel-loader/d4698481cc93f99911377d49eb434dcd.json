{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // store.ts\n\n\nimport { createStore } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper'; // create your reducer\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    tick: 'init'\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'TICK':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tick: action.payload\n      });\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["reducer","state","tick","action","payload","makeStore","createStore","wrapper","createWrapper","debug"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;;;AAEA,SAAA,WAAA,QAAA,OAAA;AACA,SAAA,aAAA,EAAA,OAAA,QAAA,oBAAA,C,CAMA;;AACA,IAAMA,OAAO,GAAG,SAAVA,OAAU,GAAsD;AAAA,MAArDC,KAAqD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAsC;AAAA,MAAtBC,MAAsB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;;AAClE,UAAQA,MAAM,CAAd,IAAA;AACI,SAAA,OAAA;AACI;AACA,aAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAqBA,MAAM,CAA3B,OAAA,CAAA;;AACJ,SAAA,MAAA;AACI,aAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAAkBD,QAAAA,IAAI,EAAEC,MAAM,CAACC;AAA/B,OAAA,CAAA;;AACJ;AACI,aAAA,KAAA;AAPR;AADJ,CAAA,C,CAYA;;;AACA,IAAMC,SAA2B,GAAG,SAA9BA,SAA8B,CAAA,OAAA,EAAA;AAAA,SAAsBC,WAAW,CAAjC,OAAiC,CAAjC;AAApC,CAAA,C,CAEA;;;AACA,OAAO,IAAMC,OAAO,GAAGC,aAAa,CAAA,SAAA,EAAmB;AAACC,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["// store.ts\n\nimport {createStore, AnyAction} from 'redux';\nimport {MakeStore, createWrapper, Context, HYDRATE} from 'next-redux-wrapper';\n\nexport interface State {\n    tick: string;\n}\n\n// create your reducer\nconst reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n    switch (action.type) {\n        case HYDRATE:\n            // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n            return {...state, ...action.payload};\n        case 'TICK':\n            return {...state, tick: action.payload};\n        default:\n            return state;\n    }\n};\n\n// create a makeStore function\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}