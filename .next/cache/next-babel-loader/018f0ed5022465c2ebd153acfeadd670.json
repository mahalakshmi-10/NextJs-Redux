{"ast":null,"code":"import * as announcementActions from './action';\nexport var initialState = {\n  message: 'No announcement...'\n};\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('action :>> ', action);\n\n  switch (action.type) {\n    case announcementActions.UPDATE_ANNOUNCEMENT:\n      return Object.assign({}, state, {\n        message: action.message\n      });\n\n    default:\n      return state;\n  }\n};\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/states/announcement/reducer.tsx"],"names":["initialState","message","reducer","state","action","console","announcementActions"],"mappings":"AAEA,OAAO,KAAP,mBAAA,MAAA,UAAA;AAEA,OAAO,IAAMA,YAA2B,GAAG;AACzCC,EAAAA,OAAO,EAAE;AADgC,CAApC;AAIP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAzBH,YAAyB;AAAA,MAAXI,MAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;AACvDC,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,aAAAA,EAAAA,MAAAA;;AACA,UAAQD,MAAM,CAAd,IAAA;AACE,SAAKE,mBAAmB,CAAxB,mBAAA;AACE,aAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEL,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAAlB,OAAzB,CAAP;;AACF;AAAS,aAAA,KAAA;AAHX;AAFK,CAAA","sourcesContent":["\nimport { IAnnouncement } from './state'\nimport * as announcementActions from './action'\n\nexport const initialState: IAnnouncement = {\n  message: 'No announcement...'\n}\n\nexport const reducer = (state = initialState, action) => {\n  console.log('action :>> ', action);\n  switch (action.type) {\n    case announcementActions.UPDATE_ANNOUNCEMENT:\n      return Object.assign({}, state, { message: action.message })\n    default: return state\n  }\n}   "]},"metadata":{},"sourceType":"module"}