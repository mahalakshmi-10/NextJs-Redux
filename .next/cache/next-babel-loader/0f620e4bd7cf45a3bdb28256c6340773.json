{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer, initialState } from './states/announcement/reducer';\nimport { createWrapper } from 'next-redux-wrapper';\nexport var initalStore = function initalStore(initialState) {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}; // create a makeStore function\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}; // let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));\n// export an assembled wrapper    \n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","reducer","initialState","createWrapper","initalStore","makeStore","context","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,OAAT,EAAiBC,YAAjB,QAAqC,+BAArC;AAEA,SAAmBC,aAAnB,QAAgD,oBAAhD;AAQA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACF,YAAD,EAAkB;AAC3C,SAAOL,WAAW,CAACI,OAAD,EAAUC,YAAV,EAAwBH,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAA3C,CAAlB;AACD,CAFM,C,CAQP;;AACA,IAAMK,SAA2B,GAAG,SAA9BA,SAA8B,CAACC,OAAD;AAAA,SAAsBT,WAAW,CAACI,OAAD,EAAUC,YAAV,EAAwBH,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAA3C,CAAjC;AAAA,CAApC,C,CAGA;AAGA;;;AACA,OAAO,IAAMO,OAAO,GAAGJ,aAAa,CAAQE,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\nimport { reducer,initialState } from './states/announcement/reducer';\n\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\n\nexport interface State {\n  message: 'No announcement...'\n}\n\n\n\nexport const initalStore = (initialState) => {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n}\n\n\n\n\n  \n// create a makeStore function\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware))); \n\n\n// let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));\n\n\n// export an assembled wrapper    \nexport const wrapper = createWrapper<State>(makeStore, {debug: true});     "]},"metadata":{},"sourceType":"module"}