{"ast":null,"code":"// store.ts\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { reducer } from \"./states/announcement/reducer\";\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nvar initialState = {};\nvar enhancers = [];\nvar middleware = [routerMiddleware(history)]; // export const initialRootState = {tick:\"ghgh\"};\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\nvar composedEnhancers = compose.apply(void 0, [applyMiddleware.apply(void 0, middleware)].concat(enhancers)); // create a makeStore function\n\nvar makeStore = function makeStore(context) {\n  return createStore(connectRouter(reducer), initialState, composedEnhancers);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","applyMiddleware","compose","createWrapper","reducer","connectRouter","routerMiddleware","initialState","enhancers","middleware","history","composedEnhancers","makeStore","context","wrapper","debug"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAAmBC,aAAnB,QAAgD,oBAAhD;AACA,SAAQC,OAAR,QAAsB,+BAAtB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AAOA,IAAMC,YAAY,GAAG,EAArB;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,UAAU,GAAG,CAACH,gBAAgB,CAACI,OAAD,CAAjB,CAAnB,C,CACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,iBAAiB,GAAGT,OAAO,MAAP,UACxBD,eAAe,MAAf,SAAmBQ,UAAnB,CADwB,SAErBD,SAFqB,EAA1B,C,CAKA;;AACC,IAAMI,SAA2B,GAAG,SAA9BA,SAA8B,CAACC,OAAD;AAAA,SAAuBb,WAAW,CACrEK,aAAa,CAACD,OAAD,CADwD,EAC9CG,YAD8C,EACjCI,iBADiC,CAAlC;AAAA,CAApC,C,CAGD;;;AACA,OAAO,IAAMG,OAAO,GAAGX,aAAa,CAAQS,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["// store.ts\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\nimport {reducer} from \"./states/announcement/reducer\";\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\n \nexport interface State {\n  message: 'No announcement...'\n}\n\n\nconst initialState = {}\nconst enhancers = []\nconst middleware = [routerMiddleware(history)]\n// export const initialRootState = {tick:\"ghgh\"};\n\n\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n)\n\n// create a makeStore function\n const makeStore: MakeStore<State> = (context: Context) =>  createStore(\n  connectRouter(reducer),initialState,composedEnhancers)\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}