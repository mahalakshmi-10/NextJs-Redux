{"ast":null,"code":"// store.ts\nimport { createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper'; // import {reducer} from \"./states/announcement/reducer\";\n\nexport const initialRootState = {\n  config: {},\n  customData: {}\n}; // create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n// create a makeStore function\n\nconst makeStore = context => createStore(reducer, initialRootState); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","createWrapper","initialRootState","config","customData","makeStore","context","reducer","wrapper","debug"],"mappings":"AAAA;AAEA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAmBC,aAAnB,QAAgD,oBAAhD,C,CACA;;AAMA,OAAO,MAAMC,gBAAgB,GAAG;AAACC,EAAAA,MAAM,EAAC,EAAR;AAAYC,EAAAA,UAAU,EAAC;AAAvB,CAAzB,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,SAA2B,GAAIC,OAAD,IAAsBN,WAAW,CAACO,OAAD,EAASL,gBAAT,CAArE,C,CAEA;;;AACA,OAAO,MAAMM,OAAO,GAAGP,aAAa,CAAQI,SAAR,EAAmB;AAACI,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["// store.ts\n\nimport {createStore} from 'redux';\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\n// import {reducer} from \"./states/announcement/reducer\";\n \nexport interface State {\n    tick: string;\n}\n\nexport const initialRootState = {config:{}, customData:{}};\n\n\n\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\n// create a makeStore function\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer,initialRootState);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}