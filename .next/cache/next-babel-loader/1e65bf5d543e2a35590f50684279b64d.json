{"ast":null,"code":"// store.ts\nimport { createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { reducer, initialState } from \"./states/announcement/reducer\"; // export const initialRootState = {tick:\"ghgh\"};\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n// create a makeStore function\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer, initialState);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["makeStore","createStore","wrapper","createWrapper","debug"],"mappings":"AAAA;AAEA,SAAA,WAAA,QAAA,OAAA;AACA,SAAA,aAAA,QAAA,oBAAA;AACA,SAAA,OAAA,EAAA,YAAA,QAAA,+BAAA,C,CAMA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAMA,SAA2B,GAAG,SAA9BA,SAA8B,CAAA,OAAA,EAAA;AAAA,SAAsBC,WAAW,CAAA,OAAA,EAAjC,YAAiC,CAAjC;AAApC,CAAA,C,CAEA;;;AACA,OAAO,IAAMC,OAAO,GAAGC,aAAa,CAAA,SAAA,EAAmB;AAACC,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["// store.ts\n\nimport {createStore} from 'redux';\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\nimport {reducer,initialState} from \"./states/announcement/reducer\";\n \nexport interface State {\n    tick: string;\n}\n\n// export const initialRootState = {tick:\"ghgh\"};\n\n\n\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\n// create a makeStore function\nconst makeStore: MakeStore<State> = (context: Context) => createStore(reducer,initialState);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}