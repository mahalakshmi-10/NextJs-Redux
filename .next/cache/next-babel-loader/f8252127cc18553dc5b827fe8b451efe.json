{"ast":null,"code":"export var UPDATE_ANNOUNCEMENT = '[Announcement] update'; // let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));\n// export const updateAnnouncement = async(message: string) => (dispatch) => {\n//   console.log('message :>> ', message);\n//   return dispatch({ type: UPDATE_ANNOUNCEMENT, message })\n// }\n// Action Creators\n\nexport function updateAnnouncement(message) {\n  return {\n    type: UPDATE_ANNOUNCEMENT,\n    message: message\n  };\n}\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/states/announcement/action.tsx"],"names":["UPDATE_ANNOUNCEMENT","type","message"],"mappings":"AAAA,OAAO,IAAMA,mBAAmB,GAAzB,uBAAA,C,CAGP;AAIA;AACA;AACA;AACA;AAGA;;AACA,OAAO,SAAA,kBAAA,CAAA,OAAA,EAA6C;AAElD,SAAO;AACHC,IAAAA,IAAI,EADD,mBAAA;AAEHC,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAID","sourcesContent":["export const UPDATE_ANNOUNCEMENT = '[Announcement] update'\n\n\n// let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));\n\n\n\n// export const updateAnnouncement = async(message: string) => (dispatch) => {\n//   console.log('message :>> ', message);\n//   return dispatch({ type: UPDATE_ANNOUNCEMENT, message })\n// }\n\n\n// Action Creators\nexport function updateAnnouncement(message: string) {\n  \n  return {\n      type: UPDATE_ANNOUNCEMENT,\n      message\n  };\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}