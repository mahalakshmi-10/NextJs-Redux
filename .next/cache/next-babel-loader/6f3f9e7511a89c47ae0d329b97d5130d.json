{"ast":null,"code":"// store.ts\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { reducer } from \"./states/announcement/reducer\";\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [routerMiddleware(history)]; // export const initialRootState = {tick:\"ghgh\"};\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\nconst composedEnhancers = compose(applyMiddleware(...middleware), ...enhancers); // create a makeStore function\n\nconst makeStore = context => createStore(connectRouter(reducer), initialState, composedEnhancers); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","applyMiddleware","compose","createWrapper","reducer","connectRouter","routerMiddleware","initialState","enhancers","middleware","history","composedEnhancers","makeStore","context","wrapper","debug"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAAmBC,aAAnB,QAAgD,oBAAhD;AACA,SAAQC,OAAR,QAAsB,+BAAtB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AAOA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,UAAU,GAAG,CAACH,gBAAgB,CAACI,OAAD,CAAjB,CAAnB,C,CACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAGT,OAAO,CAC/BD,eAAe,CAAC,GAAGQ,UAAJ,CADgB,EAE/B,GAAGD,SAF4B,CAAjC,C,CAKA;;AACC,MAAMI,SAA2B,GAAIC,OAAD,IAAuBb,WAAW,CACrEK,aAAa,CAACD,OAAD,CADwD,EAC9CG,YAD8C,EACjCI,iBADiC,CAAtE,C,CAGD;;;AACA,OAAO,MAAMG,OAAO,GAAGX,aAAa,CAAQS,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["// store.ts\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\nimport {reducer} from \"./states/announcement/reducer\";\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\n \nexport interface State {\n  message: 'No announcement...'\n}\n\n\nconst initialState = {}\nconst enhancers = []\nconst middleware = [routerMiddleware(history)]\n// export const initialRootState = {tick:\"ghgh\"};\n\n\n// create your reducer\n// const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n//     switch (action.type) {\n//         case HYDRATE:\n//             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//             return {...state, ...action.payload};\n//         case 'TICK':\n//             return {...state, tick: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n)\n\n// create a makeStore function\n const makeStore: MakeStore<State> = (context: Context) =>  createStore(\n  connectRouter(reducer),initialState,composedEnhancers)\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}