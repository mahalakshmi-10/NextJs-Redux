{"ast":null,"code":"// // store.ts\n// import { createStore } from 'redux'\n// import {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\n// import {reducer,initialState} from \"./states/announcement/reducer\";\n// export interface State {\n//   message: 'No announcement...'\n// }\n// // export const initialRootState = {tick:\"ghgh\"};\n// // create your reducer\n// // const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n// //     switch (action.type) {\n// //         case HYDRATE:\n// //             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n// //             return {...state, ...action.payload};\n// //         case 'TICK':\n// //             return {...state, tick: action.payload};\n// //         default:\n// //             return state;\n// //     }\n// // };\n// // create a makeStore function\n// const makeStore: MakeStore<State> = (context: Context) => createStore(reducer,initialState);\n// // let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));\n// // export an assembled wrapper\n// export const wrapper = createWrapper<State>(makeStore, {debug: true});\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer } from \"./states/announcement/reducer\";\nexport function initializeStore(initialState) {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}","map":{"version":3,"sources":["/home/trioangle/Documents/Nextjs-Redux/store.tsx"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","reducer","initializeStore","initialState"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAKA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAGA,SAAQC,OAAR,QAAsB,+BAAtB;AAKA,OAAO,SAASC,eAAT,CAA0BC,YAA1B,EAAwC;AAC7C,SAAON,WAAW,CAACI,OAAD,EAAUE,YAAV,EAAwBJ,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAA3C,CAAlB;AACD","sourcesContent":["// // store.ts\n// import { createStore } from 'redux'\n// import {MakeStore, createWrapper, Context} from 'next-redux-wrapper';\n// import {reducer,initialState} from \"./states/announcement/reducer\";\n \n// export interface State {\n//   message: 'No announcement...'\n// }\n\n// // export const initialRootState = {tick:\"ghgh\"};\n\n\n\n// // create your reducer\n// // const reducer = (state: State = {tick: 'init'}, action: AnyAction) => {\n// //     switch (action.type) {\n// //         case HYDRATE:\n// //             // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n// //             return {...state, ...action.payload};\n// //         case 'TICK':\n// //             return {...state, tick: action.payload};\n// //         default:\n// //             return state;\n// //     }\n// // };\n\n// // create a makeStore function\n// const makeStore: MakeStore<State> = (context: Context) => createStore(reducer,initialState);\n\n\n// // let store = createStore(quotes, initialState, applyMiddleware(httpMiddleware));\n\n\n// // export an assembled wrapper\n// export const wrapper = createWrapper<State>(makeStore, {debug: true});\n\n\n\n\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\n\nimport {reducer} from \"./states/announcement/reducer\";\n\n\n\n\nexport function initializeStore (initialState) {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n}\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}